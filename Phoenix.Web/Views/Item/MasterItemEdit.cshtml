@using Phoenix.Web.Models
@model Phoenix.Web.Models.ItemModel
@{
    ViewBag.Title = "Item Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container" style="width: 1170px !important;">
    <div>
        @using (Html.BeginForm("MasterItemEdit", "Item", FormMethod.Post, new { id = "newMasterItem", Class = "form-horizontal", role = "form" }))
        {
            @Html.HiddenFor(i => i.ItemId)
            @Html.HiddenFor(i => i.cDN)
            @Html.HiddenFor(i => i.NetworkObjectId)
            @Html.HiddenFor(i => i.IsEnabled)
            @Html.HiddenFor(i => i.CreateNewAfterSave)
            @Html.Hidden("statusMsg", (string)ViewBag.statusMessage)
            <div class="row">
                <div class="col-xs-4">
                    @if (Model.ItemId == 0)
                    {
                        <h4>Create Master Item</h4>
                    }
                    else
                    {
                        <h4>Edit @Model.DisplayName</h4>
                    }
                </div>
                @if (User.IsInRole("Administrator") || User.IsInRole("SuperAdministrator"))
                {
                    <div class="col-xs-8">
                        <h4>
                            <span class='pull-right'>&nbsp;<button type="button" id="btnSaveMasterItem" value="Save" class="btn btn-default btn-primary savefunctionalbtn" data-loading-text="Saving..." onclick="return validate('save');"><i class="glyphicon glyphicon-ok"></i>&nbsp; Save</button></span>
                            <span class='pull-right'>&nbsp;<button type="button" id="btnSaveNewMasterItem" value="SaveNew" class="btn btn-default btn-primary pull-right savefunctionalbtn" data-loading-text="Saving..." onclick="return validate('saveandnew');"><i class="glyphicon glyphicon-th-large"></i>&nbsp; Save & New</button></span>

                            @if (Model.ItemId != 0)
                            {
                                <span class='pull-right'>&nbsp;<a class="btn btn-default" id="btnCreateItem"><i class="glyphicon glyphicon-th-large"></i>&nbsp;Create Master Item</a></span>
                            }<span class='pull-right'>&nbsp;<a id="btnMasterItemList" class="btn btn-default btn-inverse"><i class="glyphicon glyphicon-chevron-left glyphicon-white"></i>&nbsp;Back to Items</a></span>

                        </h4>
                    </div>

                }
            </div>
            <hr style="width: 100%;" />
            <div class="row">
                <div class="form-group">
                    <div id="divNotSavedMsg" style="display: none;">
                        Please click on "Save" to save your changes
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                    <div class="form-group">
                        @Html.LabelFor(i => i.DisplayName, new { Class = "control-label col-xs-2" })
                        <div class="col-xs-8">
                            @Html.TextBoxFor(i => i.DisplayName, new { Class = "form-control", maxlength = 128 }) @Html.ValidationMessageFor(i => i.DisplayName)
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                    <div class="form-group">
                        @Html.LabelFor(i => i.ItemName, new { Class = "control-label col-xs-2" })
                        <div class="col-xs-8">
                            @Html.TextBoxFor(i => i.ItemName, new { Class = "form-control", maxlength = 128 }) @Html.ValidationMessageFor(i => i.ItemName)
                        </div>
                    </div>
                </div>
            </div>
            @*<div class="row">
                    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                        <div class="form-group">
                            @Html.LabelFor(i => i.MenuItemName, new { Class = "control-label col-xs-2" })
                            <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                @Html.TextBoxFor(i => i.MenuItemName, new { Class = "form-control", maxlength = 64 }) @Html.ValidationMessageFor(i => i.MenuItemName)
                            </div>
                        </div>
                    </div>
                </div>*@
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                    <div class="form-group">
                        @Html.LabelFor(i => i.DeepLinkId, new { Class = "control-label col-xs-2" })
                        <div class="col-xs-8">
                            @Html.TextBoxFor(i => i.DeepLinkId, new { Class = "form-control", maxlength = 64 }) @Html.ValidationMessageFor(i => i.DeepLinkId)
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label class="control-label col-xs-2">Descriptions</label>
                <div class="col-xs-8">
                    <ul id="itemDescpanelbar" class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                        <li id="panelItem0">
                            <span class="div-with-marign-5">Display Description</span>
                            <div>
                                @Html.TextAreaFor(i => i.DisplayDescription, new { maxlength = 512, rows = 5, cols = 50, Class = "k-textbox", style = "width:750px !important;" })
                            </div>
                        </li>
                        @{if (Model.ItemDescriptions != null && Model.ItemDescriptions.Any())
                        {
                            var index = 0;
                            foreach (var itemDesc in Model.ItemDescriptions)
                            {
                                //Display only if it is active
                                if (!itemDesc.ToDelete)
                                {
                                    var txtId = "panelItem" + (index + 1);
                                    <li>
                                        <span class="div-with-marign-5">Alternate Description @(index + 1) <a href="#" class="pull-right" style="margin-right:10px;" onclick="removeSelectedItemDesc(@index)">Delete</a></span>
                                        <div>
                                            @Html.TextArea("ItemDescriptions[" + index.ToString() + "].Description", itemDesc.Description, new { maxlength = 512, rows = 5, cols = 50, Class = "k-textbox", style = "width:750px !important;" })
                                        </div>
                                    </li>
                                }
                                //Add hidden var even if it is delete
                                @Html.Hidden("ItemDescriptions[" + index.ToString() + "].ItemDescriptionId", itemDesc.ItemDescriptionId)
                                @Html.Hidden("ItemDescriptions[" + index.ToString() + "].ItemId", itemDesc.ItemId)
                                @Html.Hidden("ItemDescriptions[" + index.ToString() + "].IsActive", itemDesc.IsActive)
                                @Html.Hidden("ItemDescriptions[" + index.ToString() + "].ToDelete", itemDesc.ToDelete)
                                index++;
                            }
                        }
                        }
                    </ul>@Html.ValidationMessageFor(i => i.DisplayDescription)
                </div>
                @if (User.IsInRole("Administrator") || User.IsInRole("SuperAdministrator"))
                {
                    <div class="col-xs-1 col-sm-1 col-md-1 col-lg-1">
                        <span>&nbsp;<a id="btnItemDesctoPanel" class="btn btn-default"><i class="glyphicon glyphicon-plus"></i>&nbsp;Add Description</a></span>
                    </div>
                }
            </div>
            <div class="row">
                <div class="col-xs-12">
                    <div class="form-group">
                        <div class="control-label col-xs-2">POS Items</div>
                        <div class="col-xs-8">
                            <div class="panel panel-default">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-xs-12">
                                            <table id="tablePOSData" class="table table-striped table-hover" style="text-align:center;">
                                                <thead>
                                                    <tr>
                                                        <th style="text-align:center">Name</th>
                                                        <th style="text-align:center">PLU</th>
                                                        <th style="text-align:center">Alt Id</th>
                                                        <th style="text-align:center">Price</th>
                                                        <th style="text-align:center">Default</th>
                                                        <th width="24%">
                                                            @if (User.IsInRole("Administrator") || User.IsInRole("SuperAdministrator"))
                                                            {
                                                                <div class='pull-right'>&nbsp;<a class="btn btn-sm btn-default" id="btnMapPOSData"><i class='glyphicon glyphicon-plus'></i>&nbsp;Add</a></div>
                                                                <a class="btn btn-sm btn-default pull-right" id="btnCreatePOSData"><i class='glyphicon glyphicon-th-large'></i>&nbsp;Create</a>
                                                            }
                                                        </th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @if (Model.POSDatas != null)
                                                    {
                                                        var index = 0;
                                                        var existingPOSIds = "";
                                                        foreach (var posdata in Model.POSDatas)
                                                        { //Display only if it is active
                                                            if (!posdata.ToRemove)
                                                            {
                                                                existingPOSIds = existingPOSIds + posdata.POSDataId.ToString() + ",";

                                                                <tr id="trPOSData_@(index)" ondblclick="openEditPOSItemWindow(@posdata.NetworkObjectId,@Newtonsoft.Json.JsonConvert.SerializeObject(posdata),@index,true,false)">
                                                                    <td id="tdPOSData_@(index)_Name">
                                                                        @Html.DisplayFor(x => posdata.POSItemName)
                                                                    </td>
                                                                    <td id="tdPOSData_@(index)_PLU">
                                                                        @Html.DisplayFor(x => posdata.PLU)
                                                                    </td>
                                                                    <td id="tdPOSData_@(index)_AltPLU">
                                                                        @Html.DisplayFor(x => posdata.AlternatePLU)
                                                                    </td>
                                                                    <td id="tdPOSData_@(index)_Price">
                                                                        @Html.DisplayFor(x => posdata.BasePrice)
                                                                    </td>
                                                                    <td>
                                                                        @Html.RadioButton("rdPOSIsDefault", false, posdata.IsDefault, new { name = "rdPOSIsDefault", Class = "chkPLU", data_index = index })
                                                                    </td>
                                                                    @if (User.IsInRole("Administrator") || User.IsInRole("SuperAdministrator"))
                                                                    {
                                                                        <td class='center-text'>
                                                                            <a class="btn btn-xs btn-danger" id="btnRemovePOSData_@(index)" onclick="removePOSData(@posdata.POSDataId,@index);"><i class="glyphicon glyphicon-minus"></i>&nbsp;Remove</a>
                                                                            <a class="btn btn-xs btn-danger" id="btnDeletePOSData_@(index)" onclick="deletePOSData(@posdata.POSDataId,@index);"><i class="glyphicon glyphicon-remove"></i>&nbsp;Delete</a>
                                                                        </td>
                                                                    }
                                                                </tr>
                                                                <span id="hdnValue_@index">
                                                                    @Html.Hidden("POSDatas[" + index.ToString() + "].ItemPOSDataLinkId", posdata.ItemPOSDataLinkId)
                                                                    @Html.Hidden("POSDatas[" + index.ToString() + "].ItemId", posdata.ItemId)
                                                                    @Html.Hidden("POSDatas[" + index.ToString() + "].POSDataId", posdata.POSDataId)
                                                                    @Html.Hidden("POSDatas[" + index.ToString() + "].POSItemName", posdata.POSItemName)
                                                                    @Html.Hidden("POSDatas[" + index.ToString() + "].PLU", posdata.PLU)
                                                                    @Html.Hidden("POSDatas[" + index.ToString() + "].AlternatePLU", posdata.AlternatePLU)
                                                                    @Html.Hidden("POSDatas[" + index.ToString() + "].IsDefault", posdata.IsDefault)
                                                                    @Html.Hidden("POSDatas[" + index.ToString() + "].BasePrice", posdata.BasePrice)
                                                                    @Html.Hidden("POSDatas[" + index.ToString() + "].ToRemove", posdata.ToRemove)
                                                                    @Html.Hidden("POSDatas[" + index.ToString() + "].ToDelete", posdata.ToDelete)
                                                                </span>
                                                                    index++;
                                                            }
                                                        }

                                                        <input type="hidden" id="hdnExistingPOS" value="@existingPOSIds" />
                                                    }
                                                </tbody>
                                            </table>

                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            @*<div class="form-group">
                    @Html.LabelFor(i => i.BasePLU, new { Class = "control-label col-xs-2 col-sm-3 col-md-3 col-lg-3" })
                    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                        @Html.TextBoxFor(i => i.BasePLU, new { Class = "form-control" })
                        @Html.ValidationMessageFor(i => i.BasePLU)
                    </div>
                    @if (Model.BasePLU.HasValue)
                    {
                        <div><i id="iPLUTooltip" class="glyphicon glyphicon-info-sign"></i></div>
                    }
                </div>
                <div class="row">
                    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                        <div class="form-group">
                            @Html.LabelFor(i => i.AlternatePLU, new { Class = "control-label col-xs-2 col-sm-3 col-md-3 col-lg-3" })
                            <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                @Html.TextBoxFor(i => i.AlternatePLU, new { Class = "form-control", maxlength = 64 }) @Html.ValidationMessageFor(i => i.AlternatePLU)
                            </div>
                            <div><i id="iAltPLUTooltip" class="glyphicon glyphicon-info-sign"></i></div>
                        </div>
                    </div>
                </div>*@
            <div class="form-group">
                <label class="control-label col-xs-2">Images</label>
                <div class="col-xs-8">
                    <div class="row">
                        <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3" style="margin-bottom: 5px;">
                            <a id="btnAsset" class="btn btn-default"><i class="glyphicon glyphicon-plus"></i>&nbsp;Add Image</a>
                        </div>
                    </div>
                    @{
                                                    var existingImages = "";
                                                    var indx = 0;
                    }
                    <div class="row" id="divAllImages">
                        @if (Model.Assets != null && Model.Assets.Any(x => x.AssetTypeId == (int)Phoenix.DataAccess.AssetTypes.Image))
                        {
                        @*<div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">Images:</div>*@
                            foreach (var ail in Model.Assets.Where(x => x.AssetTypeId == (int)Phoenix.DataAccess.AssetTypes.Image))
                            {
                                //Display only if it is active
                                if (!ail.ToDelete)
                                {
                                    var divId = "divImg" + ail.AssetId;
                                    existingImages = existingImages + ail.AssetId.ToString() + ",";
                        <div class="col-xs-2 col-sm-2 col-md-2 col-lg-2">
                            <div id='@divId' style="width:87px !important;height:62px !important;">
                                <pre style="padding: 2px;"><a href="#" onclick="showAssetImage('@ail.BlobName')"><img id="ItemImage" width=80 height=60 src="@Model.cDN@ail.ThumbNailBlobName" /></a><a href="#" class="pull-right" onclick="deleteAssetImage('@ail.AssetId',@indx)">x</a></pre>
                            </div>
                        </div>
                                }
                                //Add hidden var even if it is delete
                        @Html.Hidden("Assets[" + indx.ToString() + "].AssetItemLinkId", ail.AssetItemLinkId)
                        @Html.Hidden("Assets[" + indx.ToString() + "].ItemId", ail.ItemId)
                        @Html.Hidden("Assets[" + indx.ToString() + "].AssetId", ail.AssetId)
                        @Html.Hidden("Assets[" + indx.ToString() + "].BlobName", ail.BlobName)
                        @Html.Hidden("Assets[" + indx.ToString() + "].ThumbNailBlobName", ail.ThumbNailBlobName)
                        @Html.Hidden("Assets[" + indx.ToString() + "].ToDelete", ail.ToDelete)
                        @Html.Hidden("Assets[" + indx.ToString() + "].AssetTypeId", ail.AssetTypeId)
                                indx++;
                            }
                        }
                        <span id="newImages"></span>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label class="control-label col-xs-2">Icons</label>
                <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                    <div class="row">
                        <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3" style="margin-bottom: 5px;">
                            <a id="btnAddIcon" class="btn btn-default"><i class="glyphicon glyphicon-plus"></i>&nbsp;Add Icon</a>
                        </div>
                    </div>
                    <div class="row" id="divAllIcons">
                        @if (Model.Assets != null && Model.Assets.Any(x => x.AssetTypeId == (int)Phoenix.DataAccess.AssetTypes.Icon))
                        {
                        @*<div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">Icons:</div>*@
                            foreach (var ail in Model.Assets.Where(x => x.AssetTypeId == (int)Phoenix.DataAccess.AssetTypes.Icon))
                            {
                                //Display only if it is active
                                if (!ail.ToDelete)
                                {
                                    var divId = "divImg" + ail.AssetId;
                                    existingImages = existingImages + ail.AssetId.ToString() + ",";
                        <div class="col-xs-2 col-sm-2 col-md-2 col-lg-2">
                            <div id='@divId' style="width:87px !important;height:62px !important;">
                                <pre style="padding: 2px;"><a href="#" onclick="showAssetImage('@ail.BlobName')"><img id="ItemIcon" width=80 height=60 src="@Model.cDN@ail.ThumbNailBlobName" /></a><a href="#" class="pull-right" onclick="deleteAssetImage('@ail.AssetId',@indx)">x</a></pre>
                            </div>
                        </div>
                                }
                                //Add hidden var even if it is delete
                        @Html.Hidden("Assets[" + indx.ToString() + "].AssetItemLinkId", ail.AssetItemLinkId)
                        @Html.Hidden("Assets[" + indx.ToString() + "].ItemId", ail.ItemId)
                        @Html.Hidden("Assets[" + indx.ToString() + "].AssetId", ail.AssetId)
                        @Html.Hidden("Assets[" + indx.ToString() + "].BlobName", ail.BlobName)
                        @Html.Hidden("Assets[" + indx.ToString() + "].ThumbNailBlobName", ail.ThumbNailBlobName)
                        @Html.Hidden("Assets[" + indx.ToString() + "].ToDelete", ail.ToDelete)
                        @Html.Hidden("Assets[" + indx.ToString() + "].AssetTypeId", ail.AssetTypeId)
                                indx++;
                            }
                        }
                        <span id="newIcons"></span>
                    </div>

                    <input type="hidden" id="hdnExistingImages" value="@existingImages" />
                </div>

            </div>
                        
            if (Model.IsDWFieldsEnabled)
            {
                <div>
                    @*<div class="row">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                            <div class="form-group">
                                @Html.LabelFor(i => i.ButtonText, new { Class = "control-label col-xs-2" })
                                <div class="col-xs-6">
                                    @Html.TextBoxFor(i => i.ButtonText, new { Class = "form-control", maxlength = 32 }) @Html.ValidationMessageFor(i => i.ButtonText)
                                </div>
                            </div>
                        </div>
                    </div>*@

                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                            <div class="form-group">
                                @Html.LabelFor(i => i.Feeds, new { Class = "control-label col-xs-2" })
                                <div class="col-xs-6">
                                    @Html.TextBoxFor(i => i.Feeds, new { Class = "form-control" }) @Html.ValidationMessageFor(i => i.Feeds)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                            <div class="form-group">
                                @Html.LabelFor(i => i.CookTime, new { Class = "control-label col-xs-2" })
                                <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                    @Html.HiddenFor(i => i.CookTime)
                                    @(Html.Kendo().DropDownList()
                              .Name("ddlItemCookTime")
                              .HtmlAttributes(new { style = "width: 555px" })
                              .DataTextField("Text")
                              .DataValueField("Value")
                              .Events(e =>
                              {
                                  e.DataBound("onItemCookTimeDatabound");
                                  e.Select("onItemCookTimeSelect");
                              })
                              .DataSource(source =>
                              {
                                  source.Read(read =>
                                  {
                                      read.Action("GetItemCookTimes", "Item");
                                  });

                              })
                                    )
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                            <div class="form-group">
                                @Html.LabelFor(i => i.PrepOrderTime, new { Class = "control-label col-xs-2" })
                                <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                    @Html.HiddenFor(i => i.PrepOrderTime)
                                    @(Html.Kendo().DropDownList()
                              .Name("ddlItemLookup")
                              .OptionLabel("Select a Preparation Order")
                              .HtmlAttributes(new { style = "width: 555px" })
                              .DataTextField("Text")
                              .DataValueField("Value")
                              .Events(e =>
                              {
                                  e.DataBound("onItemLookupDatabound");
                                  e.Select("onItemLookupSelect");
                              })
                              .DataSource(source =>
                              {
                                  source.Read(read =>
                                  {
                                      read.Action("GetItemLookups", "Item", new { typeId = 2, abbr = "KDSNM" });
                                  });

                              })
                                    )
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                            <div class="form-group">
                                @Html.LabelFor(i => i.DWItemCategorizationKey, new { Class = "control-label col-xs-2" })
                                <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                    @Html.HiddenFor(i => i.DWItemCategorizationKey)
                                    @(Html.Kendo().DropDownList()
                              .Name("ddlItemCategorization")
                              .OptionLabel("Select a Cost Category")
                              .HtmlAttributes(new { style = "width: 555px" })
                              .DataTextField("Text")
                              .DataValueField("Value")
                              .Events(e =>
                              {
                                  e.DataBound("onItemCategorizationDatabound");
                                  e.Select("onItemCategorizationSelect");
                              })
                              .DataSource(source =>
                              {
                                  source.Read(read =>
                                  {
                                      read.Action("GetItemCategorizations", "Item");
                                  });

                              })
                                    )
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                            <div class="form-group">
                                @Html.LabelFor(i => i.DWItemSubTypeKey, new { Class = "control-label col-xs-2" })
                                <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                    @Html.HiddenFor(i => i.DWItemSubTypeKey)
                                    @(Html.Kendo().DropDownList()
                              .OptionLabel("Select a Sub Type")
                              .Name("ddlItemSubType")
                              .HtmlAttributes(new { style = "width: 555px" })
                              .DataTextField("Text")
                              .DataValueField("Value")
                              .Events(e =>
                              {
                                  e.DataBound("onItemSubTypeDatabound");
                                  e.Select("onItemSubTypeSelect");
                              })
                              .DataSource(source =>
                              {
                                  source.Read(read =>
                                  {
                                      read.Action("GetItemSubTypes", "Item");
                                  });

                              })
                                    )
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                            <div class="form-group">
                                <div class="control-label col-xs-2">Options</div>
                                <div class="col-xs-8">
                                    <div class="row">
                                        <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
                                            <label class="checkbox">@Html.CheckBoxFor(i => i.IsEntreeApp) Entrée Appetizer </label>
                                        </div>
                                        <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
                                            <label class="checkbox">@Html.CheckBoxFor(i => i.IsBeverage) Beverage</label>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
                                            <label class="checkbox">@Html.CheckBoxFor(i => i.ForceRecipe) Force Recipe</label>
                                        </div>
                                        <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
                                            <label class="checkbox">@Html.CheckBoxFor(i => i.IsCore) Core</label>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
                                            <label class="checkbox">@Html.CheckBoxFor(i => i.PrintOnOrder) Print on Order</label>
                                        </div>
                                        <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
                                            <label class="checkbox">@Html.CheckBoxFor(i => i.PrintOnReceipt) Print on Receipt</label>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
                                            <label class="checkbox">@Html.CheckBoxFor(i => i.PrintRecipe) Print Recipe</label>
                                        </div>
                                        <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4">
                                            <label class="checkbox">@Html.CheckBoxFor(i => i.PrintOnSameLine) Print on Same Line</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            @*<div class="form-group">
                    @Html.LabelFor(i => i.BasePrice, new { Class = "control-label col-xs-2" })
                    <div class="input-group col-xs-2 col-sm-2 col-md-2 col-lg-2">
                        <span class="input-group-addon">$</span>
                        @Html.TextBoxFor(i => i.BasePrice, new { Class = "form-control", onblur = "formatBasePrice(this)", @Value = string.Format("{0:0.00}", Model.BasePrice) })
                    </div>@Html.ValidationMessageFor(i => i.BasePrice)
                </div>*@
            @*<div class="form-group">
                    @Html.LabelFor(i => i.RequestedBy, new { Class = "control-label col-xs-2" })
                    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                        @Html.HiddenFor(i => i.RequestedBy)
                        @(Html.Kendo().DropDownList()
                                .Name("ddlItemRequestedBy")
                                .OptionLabel("Select Requested By")
                                .HtmlAttributes(new { style = "width: 535px" })
                                .DataTextField("Text")
                                .DataValueField("Value")
                                .Events(e =>
                                {
                                    e.DataBound("onItemRequestedByDatabound");
                                    e.Select("onItemRequestedBySelect");
                                })
                                .DataSource(source =>
                                {
                                    source.Read(read =>
                                    {
                                        read.Action("GetItemRequestedBy", "Item");
                                    });

                                })
                        )
                    </div>
                </div>*@
            @*<div class="form-group">
                    <div class="control-label col-xs-2">Options</div>
                    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                        <div class="row">
                            <div class="col-xs-2 col-sm-2 col-md-2 col-lg-2">
                                <label class="checkbox">@Html.CheckBoxFor(i => i.IsAvailable) Is Available</label>
                            </div>
                            <div class="col-xs-2 col-sm-2 col-md-2 col-lg-2">
                                <label class="checkbox">@Html.CheckBoxFor(i => i.ShowPrice) Show Price</label>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xs-2 col-sm-2 col-md-2 col-lg-2">
                                <label class="checkbox">@Html.CheckBoxFor(i => i.IsFeatured) Is Featured </label>
                            </div>
                            <div class="col-xs-2 col-sm-2 col-md-2 col-lg-2">
                                <label class="checkbox">@Html.CheckBoxFor(i => i.QuickOrder) Quick Order</label>
                            </div>
                        </div>
                    </div>
                </div>*@
            @*<div class="form-group">
                    <div class="control-label col-xs-2">Options</div>
                    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                        <div class="row">
                            <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
                                <label class="checkbox">@Html.CheckBoxFor(i => i.IsModifier) Is Modifier</label>
                            </div>
                            <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
                                <label class="checkbox">@Html.CheckBoxFor(i => i.IsAlcohol) Is Alcohol</label>
                            </div>
                        </div>
                    </div>
                </div>*@
            @*<div class="form-group" style="display: none;">
                    <label class="control-label col-xs-2">Availability</label>
                    <div class="controls fluid">
                        Start
                            <input type="text" id="j_start_date" />
                        @Html.HiddenFor(m => m.StartDate) @Html.ValidationMessageFor(m => m.StartDate)
                        End
                            <input type="text" id="j_end_date" />
                        @Html.HiddenFor(m => m.EndDate) @Html.ValidationMessageFor(m => m.EndDate)<div class="field-validation-error" id="formErr"></div>
                    </div>
                </div>*@

        }
        <div id="winAssetItem" class="k-content resizable-window">
            <a id="btnAssetItemAdd" class="btn btn-info btn-sm pull-right addfunctionalbtn" data-loading-text="Processing..."><i class="glyphicon glyphicon-plus"></i>&nbsp;Add Selected Assets</a>
            <br />
            <br />
            <div id="gridAssetInfo" style="font-size: 75%;" class="resizable-popup-grid"></div>
        </div>
        @Html.Partial("_POSDataList")
        @Html.Partial("_POSItemDetail")
    </div>
</div>
    @section scripts{
        <script>
            var descCount = @Model.AdditionalDescCount;
            var dataModified = false;
            var cDN = '@Model.cDN';
            var _itemId = @Model.ItemId;
        </script>
        @Scripts.Render("~/bundles/masteritemedit")
        @Scripts.Render("~/bundles/poscommon")

        <style>
            .body {
                overflow-y: auto !important;
                overflow-x: auto !important;
            }
        </style>
    }

