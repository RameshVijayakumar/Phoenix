@model Phoenix.Web.Models.ItemModel
@using Phoenix.Web.Models;
<div class="container-fluid">
    <div class="row">
        <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
            <h4 class="pull-left">Edit @Model.DisplayName</h4>
            &nbsp;&nbsp;
            @if (User.IsInRole("Administrator") || User.IsInRole("SuperAdministrator") || User.IsInRole("Editor"))
            {
                <span class="pull-right">&nbsp;</span><a id="btnSaveItem" class="btn btn-default btn-primary pull-right savefunctionalbtn" data-loading-text="Saving..."><i class="glyphicon glyphicon-ok glyphicon-white"></i>&nbsp;Save</a>
                <span class="pull-right">&nbsp;</span><a class="btn btn-default pull-right functionalbtn" id="btnRemoveItem"><i class="glyphicon glyphicon-remove"></i>&nbsp;Remove ?</a>
            }
            <span class="pull-right">&nbsp;</span><a class="btn btn-default pull-right functionalbtn" id="btnViewMasterItem"><i class="glyphicon glyphicon-list"></i>&nbsp;View Master Item</a>

            <span class="pull-right">&nbsp;</span><a id="btnMenuList" class="btn btn-default btn-inverse pull-right functionalbtn"><i class="glyphicon glyphicon-chevron-left glyphicon-white"></i>&nbsp;Back to Menus</a>
        </div>
    </div>
    <hr style="width: 100%;" />

    @using (Html.BeginForm("SaveItem", "Menu", FormMethod.Post, new { id = "newItemForm", Class = "form-horizontal" }))
    {

        @Html.HiddenFor(i => i.ItemId)
        @Html.HiddenFor(i => i.IrisId)
        @Html.HiddenFor(i => i.ItemDescriptionId)
        @Html.HiddenFor(i => i.SortOrder)
        @Html.HiddenFor(i => i.NetworkObjectId)
        @Html.HiddenFor(i => i.ShowPrice)
        @Html.HiddenFor(i => i.ItemDataHash)
        @Html.HiddenFor(i => i.PreviousPOSDataIdSelected)
        @Html.HiddenFor(i => i.IsDWFieldsEnabled)
        @Html.Hidden("itemDescCount",Model.ItemDescriptions.Count())
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="form-group">
                    @Html.LabelFor(i => i.DisplayName, new { Class = "control-label col-xs-3 col-sm-3 col-md-3 col-lg-3" })
                    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                        @Html.TextBoxFor(i => i.DisplayName, new { Class = "form-control", maxlength = 128 }) @Html.ValidationMessageFor(i => i.DisplayName)
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="form-group">
                    @Html.LabelFor(i => i.ItemName, new { Class = "control-label col-xs-3 col-sm-3 col-md-3 col-lg-3" })
                    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                        @Html.TextBoxFor(i => i.ItemName, new { Class = "form-control", maxlength = 128 })
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="form-group">
                    @Html.LabelFor(i => i.DeepLinkId, new { Class = "control-label col-xs-3 col-sm-3 col-md-3 col-lg-3" })
                    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                        @Html.TextBoxFor(i => i.DeepLinkId, new { Class = "form-control", maxlength = 64, @readonly = "readonly" }) @Html.ValidationMessageFor(i => i.DeepLinkId)
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="form-group">
                    @Html.LabelFor(i => i.DisplayDescription, new { Class = "control-label col-xs-3 col-sm-3 col-md-3 col-lg-3" })
                    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                        @Html.TextAreaFor(i => i.SelectedDescription, new { rows = 5, cols = 80, @readonly = "readonly", Class = "form-control" })
                    </div>
                    <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
                        <a type="button" class="btn btn-default functionalbtn" id="btnItemDescription"><i class="glyphicon glyphicon-check"></i>Select</a>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="form-group">
                    @Html.LabelFor(i => i.SelectedPOSDataId, new { Class = "control-label col-xs-3" })
                    <div class="col-xs-6">
                        @Html.HiddenFor(i => i.SelectedPOSDataId)
                        @(Html.Kendo().DropDownList()
                            .Name("ddlItemPOSData")
                            .BindTo(Model.POSDatas)
                            .OptionLabel("Placeholder")
                            .HtmlAttributes(new { style = "width: 420px" })
                            .DataTextField("POSItemName")
                            .DataValueField("POSDataId")
                            .Template("#=data.POSItemName# # if( data.PLU != undefined) { # - #=data.PLU# # } # # if( data.AlternatePLU != undefined) { # - #=data.AlternatePLU# # } #")
                            .ValueTemplate("#=data.POSItemName# # if( data.PLU != undefined) { # - #=data.PLU# # } # # if( data.AlternatePLU != undefined) { # - #=data.AlternatePLU# # } #")
                            .Events(e =>
                            {
                                e.DataBound("onItemPOSDataDatabound");
                                e.Select("onItemPOSDataSelect");
                            })
                        )
                    </div>
                </div>
            </div>
        </div>
        <div class="row divMFList" style="display:none;">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="form-group">
                    @Html.LabelFor(i => i.ModifierFlagId, new { Class = "control-label col-xs-3 col-sm-3 col-md-3 col-lg-3" })
                    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                        @Html.HiddenFor(i => i.ModifierFlagId)
                        @(Html.Kendo().DropDownList()
                            .Name("ddlItemModifierFlag")
                            .OptionLabel("Select Modifier Flag")
                            .HtmlAttributes(new { style = "width: 420px" })
                            .DataTextField("Name")
                            .DataValueField("ModifierFlagId")
                            .Template("#=data.Name# # if( data.Code != undefined) { #- #=data.Code# # } #")
                            .ValueTemplate("#=data.Name# # if( data.Code != undefined) { #- #=data.Code# # } #")
                            .Events(e =>
                            {
                                e.DataBound("onItemModifierFlagDatabound");
                                e.Select("onItemModifierFlagSelect");
                            })
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("GetModifierFlagList", "ModifierFlag").Data("readModifierFlagParams");
                                });

                            })
                        )
                    </div>
                </div>
            </div>
        </div>     
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="form-group">
                    <div class="control-label col-xs-3"></div>
                    <div class="col-xs-6  bs-group-div" title="Options">
                        <table style="width: 70%">
                            <tr>
                                <td>
                                    <label class="checkbox-inline">@Html.CheckBoxFor(i => i.IsFeatured) <span id="chkFeatured">Featured</span></label>
                                </td>
                                <td>
                                    <label class="checkbox-inline">@Html.CheckBoxFor(i => i.QuickOrder) <span id="chkQuickOrder">Quick Order</span></label>
                                </td>
                                <td>
                                    <label class="checkbox-inline">@Html.CheckBoxFor(i => i.IsIncluded) <span id="chkIncluded">Included</span></label>
                                </td>
                            </tr>
                            <tr>
                                @if (Model.ItemType == Phoenix.Web.Models.MenuType.ItemCollectionItem)
                                {
                                    <td>
                                        <label class="checkbox-inline">@Html.CheckBoxFor(i => i.IsAutoSelect) <span id="chkAutoSelect">Auto Select</span></label>
                                    </td>
                                }
                            </tr>
                            <tr>
                                <td colspan="2">
                                    <label class="checkbox-inline">@Html.CheckBoxFor(i => i.IsPriceOverriden) <span id="chkOvrPrice">Override Price</span></label>
                                    <span id="divOverridenPrice">
                                        <span class="inline input-group">
                                            <span class="input-group-addon">$</span>
                                            @Html.TextBoxFor(i => i.OverridenPrice, new { Class = "form-control col-xs-3", onblur = "formatOverridePrice(this)", @Value = string.Format("{0:0.00}", Model.OverridenPrice) })
                                        </span>
                                        @Html.ValidationMessageFor(i => i.OverridenPrice)
                                    </span>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="col-xs-3"></div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="form-group">
                    <div class="control-label col-xs-3"></div>
                    <div class="col-xs-6  bs-group-div" title="Combo Options">
                        <table style="width: 70%">
                            <tr>
                                <td>
                                    <label class="checkbox-inline">@Html.CheckBoxFor(i => i.IsSendHierarchy) <span id="chkSendHierarchy">Send Hierarchy</span></label>
                                </td>
                                <td>
                                    <label class="checkbox-inline">@Html.CheckBoxFor(i => i.IsCombo) <span id="chkCombo">Combo</span></label>
                                </td>
                                <td>
                                    <label class="checkbox-inline">@Html.CheckBoxFor(i => i.IsTopLevel) <span id="chkTopLevel">Top Level</span></label>
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="form-group">
                    <div class="control-label col-xs-3"></div>
                    <div class="col-xs-6  bs-group-div" title="Availability">
                        <table style="width: 90%">
                            <tr>
                                <td>
                                    <label class="checkbox-inline">
                                        @Html.CheckBoxFor(i => i.IsAvailable) <span id="chkAvail">Available</span>
                                    </label>
                                </td>
                                <td></td>
                            </tr>
                            <tr>
                                <td>
                                    Start
                                    <input type="text" id="j_start_date" />
                                    @Html.HiddenFor(m => m.StartDate) @Html.ValidationMessageFor(m => m.StartDate)<div class="field-validation-error" id="formErr"></div>
                                </td>
                                <td>
                                    End
                                    <input type="text" id="j_end_date" />
                                    @Html.HiddenFor(m => m.EndDate) @Html.ValidationMessageFor(m => m.EndDate)
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        if (Model.IsDWFieldsEnabled)
        {
            <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="form-group">
                    <div class="control-label col-xs-3"></div>
                    <div class="col-xs-6 bs-group-div-notitle" title="">
                        <div class="row">
                            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                <div class="form-group">
                                    @Html.LabelFor(i => i.Feeds, new { Class = "control-label col-xs-3 col-sm-3 col-md-3 col-lg-3" })
                                    <div class="col-xs-8">
                                        @Html.TextBoxFor(i => i.Feeds, new { Class = "form-control", @readonly = "readonly" }) @Html.ValidationMessageFor(i => i.Feeds)
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                <div class="form-group">
                                    @Html.LabelFor(i => i.CookTime, new { Class = "control-label col-xs-3" })
                                    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                        @Html.HiddenFor(i => i.CookTime)
                                        @(Html.Kendo().DropDownList()
                              .Name("ddlItemCookTime")
                              .OptionLabel("Select a Cook Time")
                              .HtmlAttributes(new { style = "width: 420px" })
                              .DataTextField("Text")
                              .DataValueField("Value")
                              .Events(e =>
                              {
                                  e.DataBound("onItemCookTimeDatabound");
                                  e.Select("onItemCookTimeSelect");
                              })
                              .DataSource(source =>
                              {
                                  source.Read(read =>
                                  {
                                      read.Action("GetItemCookTimes", "Item");
                                  });

                              })
                                        )
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                <div class="form-group">
                                    @Html.LabelFor(i => i.PrepOrderTime, new { Class = "control-label col-xs-3" })
                                    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                        @Html.HiddenFor(i => i.PrepOrderTime)
                                        @(Html.Kendo().DropDownList()
                              .Name("ddlItemLookup")
                              .OptionLabel("Select a Preparation Order")
                              .HtmlAttributes(new { style = "width: 420px" })
                              .DataTextField("Text")
                              .DataValueField("Value")
                              .Events(e =>
                              {
                                  e.DataBound("onItemLookupDatabound");
                                  e.Select("onItemLookupSelect");
                              })
                              .DataSource(source =>
                              {
                                  source.Read(read =>
                                  {
                                      read.Action("GetItemLookups", "Item", new { typeId = 2, abbr = "KDSNM" });
                                  });

                              })
                                        )
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                <div class="form-group">
                                    @Html.LabelFor(i => i.DWItemCategorizationKey, new { Class = "control-label col-xs-3" })
                                    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                        @Html.HiddenFor(i => i.DWItemCategorizationKey)
                                        @(Html.Kendo().DropDownList()
                              .Name("ddlItemCategorization")
                              .OptionLabel("Select a Cost Category")
                              .HtmlAttributes(new { style = "width: 420px" })
                              .DataTextField("Text")
                              .DataValueField("Value")
                              .Events(e =>
                              {
                                  e.DataBound("onItemCategorizationDatabound");
                                  e.Select("onItemCategorizationSelect");
                              })
                              .DataSource(source =>
                              {
                                  source.Read(read =>
                                  {
                                      read.Action("GetItemCategorizations", "Item");
                                  });

                              })
                                        )
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                <div class="form-group">
                                    @Html.LabelFor(i => i.DWItemSubTypeKey, new { Class = "control-label col-xs-3" })
                                    <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
                                        @Html.HiddenFor(i => i.DWItemSubTypeKey)
                                        @(Html.Kendo().DropDownList()
                              .OptionLabel("Select a Sub Type")
                              .Name("ddlItemSubType")
                              .HtmlAttributes(new { style = "width: 420px" })
                              .DataTextField("Text")
                              .DataValueField("Value")
                              .Events(e =>
                              {
                                  e.DataBound("onItemSubTypeDatabound");
                                  e.Select("onItemSubTypeSelect");
                              })
                              .DataSource(source =>
                              {
                                  source.Read(read =>
                                  {
                                      read.Action("GetItemSubTypes", "Item");
                                  });

                              })
                                        )
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                                <div class="form-group">
                                    <div class="control-label col-xs-3">Options</div>
                                    <div class="col-xs-8">
                                        <div class="row">
                                            <div class="col-xs-6">
                                                <label class="checkbox">@Html.CheckBoxFor(i => i.IsEntreeApp) Entrée Appetizer </label>
                                            </div>
                                            <div class="col-xs-6">
                                                <label class="checkbox">@Html.CheckBoxFor(i => i.IsBeverage) Beverage</label>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-xs-6">
                                                <label class="checkbox">@Html.CheckBoxFor(i => i.ForceRecipe) Force Recipe</label>
                                            </div>
                                            <div class="col-xs-6">
                                                <label class="checkbox">@Html.CheckBoxFor(i => i.IsCore) Core</label>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-xs-6">
                                                <label class="checkbox">@Html.CheckBoxFor(i => i.PrintOnOrder) Print on Order</label>
                                            </div>
                                            <div class="col-xs-6">
                                                <label class="checkbox">@Html.CheckBoxFor(i => i.PrintOnReceipt) Print on Receipt</label>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-xs-6">
                                                <label class="checkbox">@Html.CheckBoxFor(i => i.PrintRecipe) Print Recipe</label>
                                            </div>
                                            <div class="col-xs-6">
                                                <label class="checkbox">@Html.CheckBoxFor(i => i.PrintOnSameLine) Print on Same Line</label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
        }

        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <ul id="itmpanelbar">
                    @*<li id="itmpanelPoSItem k-state-active">
                        <b>
                            <span class=" div-with-marign-5" style="font-size: 120%;">
                                POS Item
                            </span>
                        </b>
                        <div class="div-with-marign-10">
                            <table class="table table-bordered table-hover" style="text-align:center;">
                                <tr><td> Placeholder Item</td></tr>
                                @foreach (var masterPOSItem in Model.POSDatas)
                                {
                                    var altText = string.IsNullOrWhiteSpace(masterPOSItem.AlternatePLU) ? "" : "- " + masterPOSItem.AlternatePLU;
                                    var basePriceText = masterPOSItem.BasePrice.HasValue ? "- $" + masterPOSItem.BasePrice.Value.ToString("0.00") : "";
                                    var selectedClass = masterPOSItem.POSDataId == Model.SelectedPOSDataId ? "alert alert-info" : "";
                                    <tr class="@selectedClass"><td> @masterPOSItem.POSItemName - @masterPOSItem.PLU @altText @basePriceText </td></tr>
                                }
                            </table>
                        </div>
                    </li>*@
                    <li id="itmpanelSch">
                        <b><span class="div-with-marign-5" style="font-size: 120%;">Schedule</span></b>
                        @Html.HiddenFor(x => x.IsScheduleModified)
                        <div class="div-with-marign-10">
                            <table id="itmSchDetailTable" class="table table-bordered" style="text-align:center;">
                                <tr>
                                    <th></th>
                                    @foreach (var dayOfWeek in Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>())
                                    {
                                        @Html.HiddenFor(x => x.ScheduleDetails[(int)dayOfWeek].Day);
                                        @Html.HiddenFor(x => x.ScheduleDetails[(int)dayOfWeek].Id);
                                                                                                      var chkdisabled = Model.ScheduleDetails[(int)dayOfWeek].Cycles.Any(x => x.IsShow.HasValue && x.IsShow.Value) ? true : false;
                                                                                                    <th data-dayofweek="@((int)dayOfWeek)" data-daypartcount="@Model.ScheduleDetails[(int)dayOfWeek].Cycles.Count()">
                                                                                                        @dayOfWeek.ToString()&nbsp;
                                                                                                        @if (chkdisabled)
                                                                                                        {
                                                                                                            @Html.CheckBoxFor(x => x.ScheduleDetails[(int)dayOfWeek].IsSelected, new { @class = "itmSchDayOfWeekChkBox", data_dayOfWeek = (int)dayOfWeek, disabled = "disabled" })
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            @Html.CheckBoxFor(x => x.ScheduleDetails[(int)dayOfWeek].IsSelected, new { @class = "itmSchDayOfWeekChkBox", data_dayOfWeek = (int)dayOfWeek })
                                                                                                        }
                                                                                                    </th>
                                    }
                                </tr>
                                @{
        var tabindex = 19;
                                }
                                @foreach (var cycle in Model.Cycles)
                                {
                                    var divId = "divCycle" + cycle.SchCycleId;
                                    <tr>
                                        <td>@cycle.CycleName</td>
                                        <div id="@divId">
                                            @foreach (var dayOfWeek in Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>())
                                            {
                                                var isDaySelected = Model.ScheduleDetails[(int)dayOfWeek] != null ? Model.ScheduleDetails[(int)dayOfWeek].IsSelected : true;
                                                var bgClass = "";
                                                var dayPartValue = "";
                                                var dayPartDetail = Model.ScheduleDetails[(int)dayOfWeek].Cycles.Where(x => x.SchCycleId == cycle.SchCycleId).FirstOrDefault();
                                                //If cycle isdetail is not null then IsShow always has value
                                                var cycleIndex = -1;
                                                if (dayPartDetail != null)
                                                {
                                                    cycleIndex = Model.ScheduleDetails[(int)dayOfWeek].Cycles.IndexOf(dayPartDetail);
                                                    dayPartValue = dayPartDetail.IsShow.HasValue ? (dayPartDetail.IsShow.Value == true ? "Show" : "Hide") : "";
                                                    var divTDId = "divDayPart_" + ((int)dayOfWeek).ToString() + "_" + cycleIndex;
                                                    <div id="@divTDId">
                                                        @Html.Hidden("ScheduleDetails[" + ((int)dayOfWeek).ToString() + "].Cycles[" + cycleIndex.ToString() + "].Id", dayPartDetail.Id)
                                                        @Html.Hidden("ScheduleDetails[" + ((int)dayOfWeek).ToString() + "].Cycles[" + cycleIndex.ToString() + "].LinkId", dayPartDetail.LinkId)
                                                        @Html.Hidden("ScheduleDetails[" + ((int)dayOfWeek).ToString() + "].Cycles[" + cycleIndex.ToString() + "].SchCycleId", dayPartDetail.SchCycleId)
                                                        @Html.Hidden("ScheduleDetails[" + ((int)dayOfWeek).ToString() + "].Cycles[" + cycleIndex.ToString() + "].IsShow", dayPartDetail.IsShow)
                                                    </div>
                                                }
                                                if (isDaySelected && string.IsNullOrWhiteSpace(dayPartValue))
                                                {
                                                    bgClass = "success";
                                                }
                                                <td class="itemSchtd @bgClass" data-schcycleid="@cycle.SchCycleId" data-dayofweek="@((int)dayOfWeek)" data-daypartvalue="@dayPartValue" data-cycleindex="@cycleIndex" tabindex="@tabindex">@dayPartValue</td>
                                                tabindex++;
                                            }

                                        </div>
                                    </tr>
                                }
                            </table>
                            <div class="alert alert-info">
                                Keyboard Shortcuts:&nbsp;&nbsp;&nbsp;<span class="label label-info">Tab</span> Navigate to next&nbsp;&nbsp;&nbsp;&nbsp;<span class="label label-info">S</span> Show&nbsp;&nbsp;&nbsp;&nbsp;<span class="label label-info">H</span> Hide&nbsp;&nbsp;&nbsp;&nbsp;<span class="label label-info">DELETE</span> Clear&nbsp;&nbsp;&nbsp;&nbsp;<span class="label label-info">Spacebar</span> Change the day default selection
                            </div>
                        </div>
                    </li>
                    <li id="itmpanelPrepItem">
                        <b><span class="div-with-marign-5" style="font-size: 120%;">Prepend Items</span></b>
                        <div class="div-with-marign-10">
                            @if (User.IsInRole("Administrator") || User.IsInRole("SuperAdministrator") || User.IsInRole("Editor"))
                            {
                                <div class='pull-right'>&nbsp;<a id="btnOpenPrependItem" class="btn btn-default btn-sm pull-right functionalbtn"><i class="glyphicon glyphicon-plus"></i>&nbsp;Add Item</a></div>
                                <div class='pull-right'>&nbsp;<a id="btnOpenOvrPrependItem" class="btn btn-default btn-sm pull-right functionalbtn"><i class="glyphicon glyphicon-plus"></i>&nbsp;Add Existing Item</a></div>
                                <br />
                            }
                            <br />
                            <div id="gridPrependItems" style="font-size: 75%;" />
                        </div>
                    </li>
                    <li id="itmpanelCol">
                        <b><span class="div-with-marign-5" style="font-size: 120%;">Collections</span></b>
                        <div class="div-with-marign-10">
                            @if (User.IsInRole("Administrator") || User.IsInRole("SuperAdministrator") || User.IsInRole("Editor"))
                            {
                                <div class='pull-right'>&nbsp;<a id="btnOpenItemCollection" class="btn btn-default btn-sm pull-right functionalbtn"><i class="glyphicon glyphicon-plus"></i>&nbsp;Add Existing Collection</a></div>
                                <a class="btn btn-default btn-sm pull-right functionalbtn" id="btnCreateCollection"><i class="glyphicon glyphicon-th-large"></i>&nbsp;Create Collection</a>
                                <br />
                            }
                            <br />
                            <div id="gridItemCollections" style="font-size: 75%;" />
                        </div>
                    </li>
                </ul>
            </div>
        </div>

        <div id="winItemDesc"></div>
        <div id="divItemDesc" style="text-align: center; width: 100%; display: none;">
            <label class="radio">
                @{var checkedDisplayText = Model.SelectedDescriptionId == 0 ? "checked" : string.Empty;}
                <input type="radio" name="rdItemDesc" id="rdItemDescId0" value="0" @checkedDisplayText />
                @Model.DisplayDescription
            </label>
            <input type="hidden" id="hdnDesc_0" value="@Model.DisplayDescription" />
            @{ foreach (var desc in Model.ItemDescriptions)
             {
                 var radioid = "rdItemDescId" + desc.ItemDescriptionId;
                 var hdnDescId = "hdnDesc_" + desc.ItemDescriptionId;
                 var checkedText = Model.SelectedDescriptionId == desc.ItemDescriptionId ? "checked" : string.Empty;
                <label class="radio">
                    <input type="radio" name="rdItemDesc" id="@radioid" value="@desc.ItemDescriptionId" @checkedText />
                    @desc.Description
                </label>
                <input type="hidden" id="@hdnDescId" value="@desc.Description" />
             }
            }
        </div>
    }
</div>

        <div id="winItemMaster"></div>
        <div id="divItemMaster" style="display: none;">
            @Html.DisplayFor(m => m.MasterItem)
        </div>

        @if (Model.ItemId != 0)
        {
            @Html.Partial("_CollectionList")
            <div id="windowPrepItemList" class="k-content resizable-window">
                <a id="btnPrepItemAdd" class="btn btn-info btn-sm pull-right addfunctionalbtn" data-loading-text="Processing..."><i class="glyphicon glyphicon-plus"></i>&nbsp;Add Selected Items</a>
                <br />
                <br />
                <div id="gridPrepItemInfo" style="font-size: 75%;" class="resizable-popup-grid"></div>
            </div>
            <div id="windowOvrPrepItemList" class="k-content resizable-window">
                <a id="btnOvrPrepItemAdd" class="btn btn-info btn-sm pull-right addfunctionalbtn" data-loading-text="Processing..."><i class="glyphicon glyphicon-plus"></i>&nbsp;Add Selected Items</a>
                <br />
                <br />
                <div id="gridOvrPrepItemInfo" style="font-size: 75%;" class="resizable-popup-grid"></div>
            </div>
            <div id="windowUpdatedPrepItemList" class="k-content resizable-window">
                Please update the following default display names:
                <br />
                <span id="prepItemUpdatedStatus" class="statusdiv"></span>
                <br />
                <div id="gridUpdatedPrepItemInfo" style="font-size: 75%;"></div>
            </div>
        }